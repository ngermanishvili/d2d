generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  USER
  ADMIN
  COURIER
}
model SavedAddress {
  id        String   @id @default(uuid())
  address   String
  mimgebisadress      String
  // Add other relevant fields as needed
  userId    String   // Reference to User

  // Add index to userId field
  @@index([userId])
  
  user      User     @relation(fields: [userId], references: [id])
}


model User {
  id            String     @id @default(cuid())
  userType      String?
  name          String?
  number        String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  input1      String?
  input2      String?
  input3      String?
  input4      String?
  input5      String?
  input6      String?
  input7      String?
  input8      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  shipments     Shipment[] // Back-reference to Shipment
  savedAddresses SavedAddress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Billboard {
  id        String   @id @default(uuid())
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Shipment {
  id                    String                  @id @unique
  gamgzavniFullName     String
  mimgebiFullName       String
  trackingId            String                  @unique
  userId                String
  phoneNumber           String
  gamgzavnisqalaqi      String                @default("თბილისი") 
  address               String 
  city                  String 
  brittle               Boolean                 @default(false) 
  packaging             Boolean                 @default(false) 
  price                 String
  markedByCourier       Boolean                 @default(false) 
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  mimgebisNumber        String
  mimgebiQalaqi         String                   @default("თბილისი") 
  mimgebisAddress       String
  status                String                  @default("მიმდინარე") 
  courierComment        String
  label                 String
  whopays               String
  itemPrice             String?
  agebisDro             String?
  chabarebisDro         String?
  assignedCourier       String? 
  User                  User                    @relation(fields: [userId], references: [id])
  ShipmentStatusHistory ShipmentStatusHistory[]

  @@index([userId])
}


model ShipmentStatusHistory {
  id         String   @id @default(uuid())
  shipmentId String
  status     String
  timestamp  DateTime @default(now())

  Shipment Shipment @relation(fields: [shipmentId], references: [id])
  
  @@index([shipmentId])

}


model BlogPosts {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.LongText
  imageUrl    String
  slug        String   @db.LongText
  qvesatauri String
  qvesatauri2 String
  excerpt     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
}

model ShipmentCounter {
  id    Int     @id @default(autoincrement())
  count Int     @default(4000)
}


model LandingPageInfo {
  id        String   @id @default(uuid())
  title     String
  description     String @db.LongText
  imageUrl  String
  panjara1Title String
  panjara1Description String @db.LongText
  panjara2Title String
  panjara2Description String @db.LongText
  panjara3Title String
  panjara3Description String @db.LongText
  InformationText String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model AboutPageInfo {
  id        String   @id @default(uuid())
  title     String
  description     String @db.LongText
  coverImageUrl  String
  boxImageUrl String
  boxTitle String
  boxDescription String @db.LongText
  panjara1Description String @db.LongText
  freqAskedQuestionsTitle String
  freqAskedQuestionsDescription String @db.LongText
  freqAskedQuestions2Title String @db.LongText
  freqAskedQuestions2Description String @db.LongText
  freqAskedQuestions3Title String @db.LongText
  freqAskedQuestions3Description String @db.LongText
  freqAskedQuestions4Title String @db.LongText
  freqAskedQuestions4Description String @db.LongText
  whatWeOfferTitle String
  whatWeOfferDescription String @db.LongText
  whatWeOffer2Title String @db.LongText
  whatWeOffer2Description String @db.LongText
  whatWeOffer3Title String @db.LongText
  whatWeOffer3Description String @db.LongText
  whatWeOfferToCourierTitle String @db.LongText
  whatWeOfferToCourierDescription String @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}